// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  login     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  profile   Profile?
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int        @unique
  department Department @relation(fields: [depId], references: [id])
  depId      Int
  grade      Grade      @default(NURSE)
}

model Task {
  id        Int      @id @default(autoincrement())
  condition String   @default("новые")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  number    String
  name      String
  cabinet   String
  problem   String
  priority  Priority @default(low)
  category  Category
  liableId  Int?
  index     String?
  files     String?
  comment   String?
}

//сделать копию для дашборда?с датой
model Ward {
  id            Int        @id @default(autoincrement())
  department    Department @relation(fields: [depId], references: [id])
  depId         Int
  number        Int        @unique
  numberOfSeats Int
  engaged       Int
  free          Int
  gender        Gender
  reserve       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  status        Status @default(active)
}

//сделать копию для дашборда
model Department {
  id            Int       @id @default(autoincrement())
  name          String
  wards         Ward[]
  numberOfSeats Int?      @default(0)
  engaged       Int?      @default(0) //Всего находиться в стационаре, накопительным (чел.) 
  free          Int?      @default(0) //Свободных коек
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  //to table
  planHuman     Int?      @default(0)
  planRub       Int?      @default(0)
  begAcc        Int?      @default(0)
  admRec        Int?      @default(0)
  //totalStays Int? //Всего находиться в стационаре, накопительным (чел.) 
  disCome       Int?      @default(0)
  disTax        Int?      @default(0)
  patOver       Int?      @default(0)
  storColed     Int?      @default(0)
  transHuman    Int?      @default(0)
  transRub      Int?      @default(0)
  medPrice      Int?      @default(0)
  dolgDead      Int?      @default(0)
  //freeBeds Int? //Свободных коек
  profile       Profile[]
}

//департмент для дашбоарда
model DashDepartment {
  id            Int      @id @default(autoincrement())
  name          String
  //wards DashWard[]
  //numberOfSeats Int?     @default(0)
  //engaged       Int?     @default(0) //Всего находиться в стационаре, накопительным (чел.) 
  //free          Int?     @default(0) //Свободных коек
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  //to table
  planHuman     Int?     @default(0)
  planRub       Int?     @default(0)
  begAcc        Int?     @default(0)
  admRec        Int?     @default(0)
  disCome       Int?     @default(0)
  disTax        Int?     @default(0)
  patOver       Int?     @default(0)
  storColed     Int?     @default(0)
  transHuman    Int?     @default(0)
  transRub      Int?     @default(0)
  medPrice      Int?     @default(0)
  dolgDead      Int?     @default(0)
  dash          Dash     @relation(fields: [dashId], references: [id])
  dashId        Int
}

//палата для дашбоарда
model DashWard {
  id            Int      @id @default(autoincrement())
  //привязка к департменту?
  //dashDepartment DashDepartment @relation(fields: [dashDepId], references: [id])
  dashDepId     Int
  number        Int
  numberOfSeats Int
  engaged       Int
  free          Int
  gender        Gender
  reserve       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status @default(active)
}

model Dash {
  id    Int              @id @default(autoincrement())
  date  DateTime         @default(now())
  table DashDepartment[]
}

model New {
  id Int @id @default(autoincrement())
  nameNews String
  dateNews DateTime @default(now())
  news String
  liable String
}

model FileCategory {
  id Int @id @default(autoincrement())
  name String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
  subCategories SubFileCategory[]
}

model SubFileCategory {
  id Int @id @default(autoincrement())
  mainCategory FileCategory @relation(fields: [fileCategoryId], references: [id])
  fileCategoryId Int 
  name String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
}

model FileBd {
  id Int @id @default(autoincrement())
  name String
  category String
  subCategory String?
  filePath String
}

model Log {
  department  DepartmentLog
  name        String
  date        DateTime
  place       String
  event       Problem
  circs       String
  gauge       String?
  note        String
  liable      String
  cause       String?
  comment     String?
  id          Int       @id @default(autoincrement())
}

model ZnoLog {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt @default(now())
  name        String        //yellow
  dateOfBirth DateTime      //yellow
  localization Localization //yellow
  phoneNumber String        //yellow
  numberOfHistory String    //yellow
  //directedWher String?                       //green
  diagnosisVKB String?                       //green
  dateOfReferralToCAOP DateTime?             //green
  dateOfVisitToCAOP DateTime?                //green
  diagnosisOfCAOP String?                    //green
  dateOfVisitToPKOD DateTime?                //green
  diagnosisOfPKOD String?                    //green
  dateOfTheConsultation DateTime?            //green
  dateOfLastCallAndPersonalContact DateTime? //green
  status StatusZno?                          //green
  statusNote String?                         //green
}

enum Localization {
  ZNOOfTheLipOropharynx//ЗНО ГУБЫ (МКБ-10: С00), РОТОГЛОТКИ (МКБ 10:С01, С02.4, C05.1, С05.2, C09, C10), ПОЛОСТИ РТА (МКБ 10:C02.0, C02.1, C02.2, C02.3, C02.8, C02.9, С03, С04, C05.0, С06)
  MalignancyOfTheEsophagusCardia//ЗНО ПИЩЕВОДА, КАРДИИ (МКБ-10: С15, С16.0)
  ZNOStomachCancer//ЗНО ЖЕЛУДКА  (МКБ-10: С16)
  MalignancyOfTheColonRectoSigMoidJointRectumAnusAnal//ЗНО ОБОДОЧНОЙ КИШКИ, РЕКТО-СИГМОИДНОГО СОЕДИНЕНИЯ, ПРЯМОЙ КИШКИ, ЗАДНЕГО ПРОХОДА (АНУСА) И АНАЛЬНОГО КАНАЛА  (МКБ-10: С18, С19, С20, С21)
  CancerOfTheLiverAndIntraheraticBileDucts//ЗНО ПЕЧЕНИ И ВНУТРИПЕЧЕНОЧНЫХ ЖЕЛЧНЫХ ПРОТОКОВ  (МКБ-10: С22)
  OncologyOfTheBiliarySystem//ЗНО ЖЕЛЧЕВЫВОДЯЩЕЙ СИСТЕМЫ (МКБ-10: С22.1, С23, С24.0)
  PancreaticCancer//ЗНО ПОДЖЕЛУДОЧНОЙ ЖЕЛЕЗЫ  (МКБ-10: С25)
  NeuroendocrineTumor//НЕЙРОЭНДОКРИНННОЙ ОПУХОЛИ (МКБ-10: C15, C16, C17, C18, C19.9, C20.9, C21, C23, C24, C25, C26, C34, C37.9, C73.9
  LarynxDisease//ЗНО ГОРТАНИ  (МКБ-10: С32)
  MalignancyOfTheTracheaLungMediastinumAndPleura//ЗНО ТРАХЕИ, ЛЕГКОГО, ВИЛОЧКОВОЙ ЖЕЛЕЗЫ, СРЕДОСТЕНИЯ И ПЛЕВРЫ   (МКБ-10: С33, С34, С37, С38)
  MelanomasAndMucousMembranes//МЕЛАНОМЫ И СЛИЗИСТЫХ ОБОЛОЧЕК  (МКБ-10: C43, C51, C60.9, C63.2, C69.0, C00–C26, C30-C32, C52, C53 C77, C78, C79 D03.0-D03.9)
  SquamousCellSkinCarcinomaBasalCellSkinCarcinomaMerkelsCarcinoma//ПЛОСКОКЛЕТОЧНОГО РАКА КОЖИ, БАЗАЛЬНО-КЛЕТОЧНОГО РАКА КОЖИ, КАРЦИНОМЫ МЕРКЕЛЯ (МКБ-10: С44, D04)
  SoftTissueSarcoma//ЗНО САРКОМЫ МЯГКИХ ТКАНЕЙ  (МКБ-10: С 49)
  BreastCancer//ЗНО МОЛОЧНОЙ ЖЕЛЕЗЫ  (МКБ-10: С50)
  MalignancyOfTheVaulvaVaginaCervix//ЗНО ВУЛЬВЫ, ВЛАГАЛИЩА, ШЕЙКИ МАТКИ,  (МКБ-10: С51, С52, С53) 
  EndometralDisease//ЗНО ЭНДОМЕТРИЯ  (МКБ-10: С54)
  OvarianCancerBorderlineTumorsNonepithelialTumorsOvarianCancer//ЗНО ЯИЧНИКОВ: ПОГРАНИЧНЫЕ ОПУХОЛИ, НЕЭПИТЕЛИАЛЬНЫЕ ОПУХОЛИ, РАК ЯИЧНИКОВ (РАК МАТОЧНОЙ ТРУБЫ), ПЕРВИЧНЫЙ РАК БРЮШИНЫ В ЦАОП (МКБ-10: С56, С48.0, С48.2, С57)
  ProstateCancer//ЗНО ПРЕДСТАТЕЛЬНОЙ ЖЕЛЕЗЫ  (МКБ-10: С61)
  TesticularCancer//ЗНО ЯИЧКА  (МКБ-10: С62)
  MalignancyOfTheRenalPelvisGlasCase//ЗНО ПАРЕНХИМЫ ПОЧКИ, ЛОХАНКИ, ОЧЕТОЧНИКА (МКБ-10: С 64, С65, С66 )
  BladderCancer//ЗНО МОЧЕВОГО ПУЗЫРЯ  (МКБ-10: С67)
  PrimaryTumorsOfTheCentralNervousSystemLimphoma//ПЕРВИЧНЫХ ОПУХОЛЕЙ ЦЕНТРАЛЬНОЙ НЕРВНОЙ СИСТЕМЫ (МКБ-10: С70, С71, С72, С75, С76), ПЕРВИЧНОЙ ЛИМФОМЫ ЦЕНТРАЛЬНОЙ НЕРВНОЙ СИСТЕМЫ (МКБ 10: С81, С82, С83, С84, С85, С86, С87, С88) 
  ThyroidCancer//ЗНО ЩИТОВИДНОЙ ЖЕЛЕЗЫ (МКБ-10: С73)
  ZnoWithoutPrimaryLocalization//ЗНО БЕЗ ПЕРВИЧНОЙ ЛОКАЛИЗАЦИИ (МКБ-10: С80)
  HodgkinsLymphomaInAdultsFollicularLymphomaInAdults//ЛИМФОМА ХОДЖКИНА У ВЗРОСЛЫХ (МКБ-10: С81), ФОЛЛИКУЛЯРНАЯ ЛИМФОМА У ВЗРОСЛЫХ (МКБ-10: С82), НЕХОДЖКИНСКАЯ ЛИМФОМА (МКБ-10: С83)
}

enum StatusZno {
  awaitingReferralToCAOP//ожидает направления в ЦАОП
  awaitingReferralToPKOD//ожидает направления в ПКОД
  waitingForAConsultation//Ожидает консилиум
  Completed//Завершено
} 

enum DepartmentLog {
  Policlinic      //Поликлиника
  Reception       //Приемное
  Pulmonology     //Пульмонология
  Rehabilitation  //Реабилитация
  Reanimation     //Реанимация
  Laboratory      //Лаборатория
  Neurology       //Неврология
  Opp             //ОПП
  Pao             //ПАО
  Ceo             //СЭО
  Therapeutic     //Терапия
  Surgical        //Хирургия
  Xray            //Рентгенология
  Administration  //Администрация
  Aho             //АХО
}

enum Problem {
  IdentificationOfThePatientsIdentity       //Идентификация личности пациента
  Collapse                                  //Падение
  PressureSores                             //Пролежни
  PressureSoresIn                           //Пролежни: наши
  PressureSoresOut                          //Пролежни: извне
  AnEventRelatedToAMedicalDeviceOrProduct   //Событие, связаное с медицинским оборудованием или изделием
  ADrugRelatedEvent                         //Событие, связанное с лекарственным средством/ фиксация пациента
  InfectiousOrParasiticDisease              //Инфекционное или паразитарное заболевание
  ISMP                                      //ИСМП (инфекции, связанные с медицинской помощью)
  SurgicalComplications                     //Хирургические осложнения
  AnotherUndesirableEvent                   //Другое нежелательное событие
  DeathInTheWard                            //Другое нежелательное событие: смерть в палате
  Hematomas                                 //Другое нежелательное событие: гематомы
}

enum Role {
  ADMIN
  TECHNICICAN
  SYSADMIN
  USER
}

//NURSE//медсестры - менять значения,
//HEAD NURSE //старшая медсестра - назначать, проверять
//DEPNURSTAFF //зам по среднему мед персоналу - менеджит койки/ создание/резерв по распоряжению
//CHIEFNURSE //главная медсестра - менеджит койки/ создание/резерв по распоряжению
//TECHNICICAN  //технический специалист
//CMO  //начмед - просто смотреть
//Врачи/фельдшера  - внесение информации о пациенте "желтые " поля + возможность просмотра и внесения информации в "зеленые" поля
//Администраторы участка - просмотр и внесение информации в "зеленые" поля
//ОМО - весь функционал

enum Grade {
  NURSE
  HEADNURSE
  DOCTOR
  SITEADMIN
  OMO
  DEPNURSTAFF
  CHIEFNURSE
  TECHNICICAN
  CMO
}

enum Gender {
  man
  woman
  mutual
}

enum Priority {
  low
  middle
  hight
}

enum Category {
  problemWithPC
  problemWithOrgTechnics
  problemWithMIS
  newMISAccount
  uploadNewProgramm
}

enum Status {
  active
  disabled
  deleted
}